buildscript { dependencies { classpath 'org.kohsuke:github-api:1.303' } }

plugins {
  id 'java-library'
  id 'idea'
  id 'eclipse'

  id 'fabric-loom' version '0.11-SNAPSHOT'
  id 'maven-publish'

  id 'com.modrinth.minotaur' version '2.1.1'
  id 'com.matthewprenger.cursegradle' version '1.4.0'
}


import com.modrinth.minotaur.dependencies.DependencyType
import com.modrinth.minotaur.dependencies.ModDependency
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

/* Setup */

def ENV = System.getenv()

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
tasks.withType(JavaCompile).configureEach { it.options.release = 17 }

String ver = "${project.version_id}+${project.major_version}"
version = ENV.GITHUB_ACTIONS ? "${ver}.build.${ENV.GITHUB_RUN_NUMBER}" : ver

group = project.maven_group

/* Dependencies */

repositories {
  maven {
    name = 'Modding Playground'
    url  = 'https://raw.githubusercontent.com/moddingplayground/maven/main/'
  }

  maven {
    name = 'Shedaniel'
    url  = 'https://maven.shedaniel.me/'
  }

  maven {
    name = 'Terraformers'
    url  = 'https://maven.terraformersmc.com/releases/'
  }

  maven {
    name = 'Ladysnake Mods'
    url  = 'https://ladysnake.jfrog.io/artifactory/mods/'
  }

  maven {
    name = 'Modrinth'
    url  = 'https://api.modrinth.com/maven/'
  }
}

dependencies {
  minecraft "com.mojang:minecraft:${project.ver_minecraft}"
  mappings "net.fabricmc:yarn:${project.ver_minecraft}+build.${project.ver_yarn}:v2"
  modImplementation "net.fabricmc:fabric-loader:${project.ver_loader}"

  // api
  modImplementation "net.fabricmc.fabric-api:fabric-api:${project.ver_fabric}"
  modImplementation "net.moddingplayground.frame:frame-fabric:${project.ver_frame}"
  modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-api:${project.ver_cardinal}"

  // integration
  modImplementation "dev.emi:trinkets:${ver_trinkets}"

  modImplementation "maven.modrinth:sodium:${project.ver_sodium}"
  implementation    "org.joml:joml:${project.ver_joml}"

  modImplementation "com.terraformersmc:modmenu:${project.ver_mod_menu}"
}

/* Miscellaneous */

loom { accessWidenerPath = file("src/main/resources/${project.mod_id}.accesswidener") }

/* Data Generation */

def dataOutput = 'src/generated/resources'

loom {
  runtimeOnlyLog4j = true

  runs {
    data {
      server()
      vmArgs(
              "-Dtoymaker.datagen=true",
              "-Dtoymaker.datagen.modid=${project.mod_id}",
              "-Dtoymaker.datagen.path=\"${project.file(dataOutput)};${project.file("$buildDir/resources/main")}\""
      )
    }
  }
}

sourceSets.main.resources { srcDirs += dataOutput }

/* Resource Processing */

processResources {
  // populate fabric.mod.json with defined version property
  inputs.property 'version', version
  filesMatching('fabric.mod.json') { expand 'version': version }

  doLast {
    // minify json files
    def start = System.currentTimeMillis()
    def minif = 0
    def bytes = 0
    fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
      File file = it
      minif++
      def oldLength = file.length()
      file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
      bytes += oldLength - file.length()
    }
    println("'Minified $minif json files. Saved $bytes bytes. Took ${System.currentTimeMillis() - start} ms.'")
  }
}

// add/remove files in jar
jar { from('README.md', 'LICENSE', 'LICENSE_ASSETS') exclude('.cache') }

/* Publishing */

publishing { publications { mavenJava(MavenPublication) { from components.java } } }

/* Releasing */

def VER_NAME = "[$project.major_version] $project.mod_name $project.version_id"
def CHANGELOG = new File("./gradle", "CHANGELOG.md").text

task github(dependsOn: build) {
  onlyIf { ENV.GITHUB_TOKEN }
  doLast {
    def github = GitHub.connectUsingOAuth(ENV.GITHUB_TOKEN)
    def repository = github.getRepository(project.github_repository)

    def builder = new GHReleaseBuilder(repository, version)
    builder.name(VER_NAME)
    builder.body(CHANGELOG)
    builder.commitish(project.github_branch)
    builder.prerelease(project.release_type == 'beta')
    builder.create().uploadAsset(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"), "application/java-archive");
  }
}

if (ENV.MODRINTH_TOKEN) modrinth {
  token = ENV.MODRINTH_TOKEN
  projectId = project.modrinth_id
  versionNumber = version
  versionName = VER_NAME
  versionType = project.release_type
  changelog = CHANGELOG
  uploadFile = remapJar
  gameVersions = [ project.ver_minecraft ]
  dependencies = [
          new ModDependency("P7dR8mSH", DependencyType.REQUIRED), // Fabric API
          new ModDependency("dY183GiL", DependencyType.REQUIRED), // Frame
          new ModDependency("K01OU20C", DependencyType.REQUIRED)  // Cardinal Components API
  ]
}

if (ENV.CURSEFORGE_API_KEY) curseforge {
  apiKey = ENV.CURSEFORGE_API_KEY

  project {
    id = project.curseforge_id
    addGameVersion project.curseforge_version
    addGameVersion 'Fabric'

    changelog = CHANGELOG
    releaseType = project.release_type

    mainArtifact(remapJar) {
      displayName = VER_NAME
      relations {
        requiredLibrary 'fabric-api'
        requiredLibrary 'frame-api'
        requiredLibrary 'cardinal-components'
      }
    }

    afterEvaluate { uploadTask.dependsOn(remapJar) }
  }

  options { forgeGradleIntegration = false }
}

task releaseVersion(dependsOn: [ build, 'github', 'modrinth', 'curseforge' ])
